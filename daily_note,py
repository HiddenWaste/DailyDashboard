# Necessary Imports
import requests     # For making the API calls
import os           # For file creation and saving functionality
from datetime import datetime  # Daily notes need to follow the date no?
import pandas as pd # To format the gathered data (at least try)

import chord_generator # Import constructed key and chord generator
import history_scrape # Import the history scraper

# API KEYS
WEATHER_API_KEY = "4b1a6ebf5a0e9f3e6197c542169d12eb"    # OpenWeather API
STOCK_API_KEY = "TFKhbppB8Yt6X1pJVnxLvaHp_Yb477IB"      # Polygon.io API
X_RAPIDAPI_KEY = "88d85341a3msh6a285814de5ffc0p10d2d5jsnd07b4d6f6f15" # RapidAPI Key


def get_music_charts():
    url = "https://genius-song-lyrics1.p.rapidapi.com/song/recommendations/"

    querystring = {"id":"2396871"}

    headers = {
        "x-rapidapi-key": X_RAPIDAPI_KEY,
        "x-rapidapi-host": "genius-song-lyrics1.p.rapidapi.com"
    }

    response = requests.get(url, headers=headers, params=querystring)

    print(response.json())

# Get today's date
today = datetime.today()
TODAY = datetime.today().strftime('%m-%d')
MONTH = today.strftime('%B')
DAY = today.strftime('%d')


# API ENDPOINTS (URLS)
WEATHER_API_URL = 'http://api.openweathermap.org/data/2.5/weather?'

# News Related API (Placeholder)
# https://rapidapi.com/blog/rapidapi-featured-news-apis/

# Music API's (Currently Top Charts, Hopeful for a way to get new releases???)
GENIUS_ARTIST_CHART_URL = "https://genius-song-lyrics1.p.rapidapi.com/chart/artists/"
GENIUS_ALBUM_CHART_URL = "https://genius-song-lyrics1.p.rapidapi.com/chart/albums/"

# Chart Data
GENIUS_CHARTS = {
    'artists': GENIUS_ARTIST_CHART_URL,
    'albums': GENIUS_ALBUM_CHART_URL
}



# Get Weather function for a location
def get_weather(location):
    try:
        params = {
            'q': location,
            'appid': WEATHER_API_KEY,
            'units': 'imperial'  # 'imperial' units for Fahrenheit
        }
        response = requests.get(WEATHER_API_URL, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching weather data: {e}")
        return None
    
# To be replaced with my own 'quotes database'
def get_quote():
    try:
        response = requests.get('https://api.quotable.io/random')
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching quote: {e}")
        return None

# Create a markdown file to showcase gathered data
def create_markdown(data, weather_data, chord_progression):

    # Initialize Metadata
    md_content = f"---\ntitle: '{TODAY} Dashboard'\ndate: '{TODAY}'\ntags: ['Blogs']\n---\n\n"

    md_content += f"# Daily Dashboard for {MONTH} {DAY}\n\n"

    if 'sf' in weather_data:
        weather_to_markdown = weather_data['sf']
        md_content += "## Weather in Sioux Falls\n"
        md_content += f"Location: {weather_to_markdown['name']}\n"
        md_content += f"Temperature: {weather_to_markdown['main']['temp']} °F\n"
        md_content += f"Weather: {weather_to_markdown['weather'][0]['description'].capitalize()}\n\n"

    if 'md' in weather_data:
        weather_to_markdown = weather_data['md']
        md_content += "## Weather in Madison\n"
        md_content += f"Location: {weather_to_markdown['name']}\n"
        md_content += f"Temperature: {weather_to_markdown['main']['temp']} °F\n"
        md_content += f"Weather: {weather_to_markdown['weather'][0]['description'].capitalize()}\n\n"

    if 'quote' in data and data['quote']:
        md_content += "## Quote of the Day\n"
        md_content += f"> {data['quote']['content']} - {data['quote']['author']}\n\n"
        md_content += f"More on [{data['quote']['author']}](https://en.wikipedia.org/wiki/{data['quote']['author'].replace(' ', '_')})\n\n"

    # Run the scrape for Today in History
    events, births, deaths = history_scrape.scrape_wikipedia_today(MONTH, DAY)
    history_content = history_scrape.create_history_content(events, births, deaths)
    md_content += history_content

    md_content += f"\n# Practice and Research!\n"

    # Include the chord progression
    if chord_progression:
        key, scale_type, progression = chord_progression
        md_content += f"## Chord Progression\n"
        md_content += f"Key: {key} {scale_type.capitalize()}\n"
        md_content += f"Progression: {' - '.join(progression)}\n\n"

    # Include the data as it is for dev and debug purposes
    md_content += f"\n\n\n## Data\n"
    md_content += f"```json\n{data}\n```\n"

    return md_content

# Save File to the relevant Daily Notes Folder
def save_markdown(content):
    folder_path = './'
    os.makedirs(folder_path, exist_ok=True)
    date_str = datetime.now().strftime('%Y-%m-%d')
    file_path = os.path.join(folder_path, f"{date_str}.md")
    with open(file_path, 'w') as file:
        file.write(content)

# Main Function
def main():
    # Actual Data Collection
    data = {}
    weather_data = {}
    
    weather_data['sf'] = get_weather('Sioux Falls,SD,USA')
    weather_data['md'] = get_weather('Madison,SD,USA')

    data['quote'] = get_quote()

    # Get the chord progression
    chord_progression = chord_generator.generate_chord_progression()

    # Actual Markdown File Creation
    markdown_content = create_markdown(data, weather_data, chord_progression)
    save_markdown(markdown_content)

if __name__ == "__main__":
    main()